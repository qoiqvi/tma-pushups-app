import { NextRequest, NextResponse } from 'next/server'
import { supabaseAdmin } from '@/lib/supabase/server'

export async function POST(request: NextRequest) {
  const startTime = Date.now()
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å Telegram
  const headerToken = request.headers.get('X-Telegram-Bot-Api-Secret-Token')
  if (headerToken !== process.env.TELEGRAM_WEBHOOK_SECRET) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
  }

  try {
    const update = await request.json()
    
    // –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º Telegram
    const response = NextResponse.json({ ok: true })
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ —Ñ–æ–Ω–µ
    handleUpdateFast(update, startTime).catch(error => {
      console.error('Background processing error:', error)
    })
    
    return response
  } catch (error) {
    console.error('Webhook error:', error)
    return NextResponse.json({ error: 'Internal error' }, { status: 500 })
  }
}

// –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫
async function handleUpdateFast(update: any, startTime: number) {
  const message = update.message
  if (!message) return
  
  const chatId = message.chat.id
  const text = message.text
  const user = message.from
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ
  if (user) {
    supabaseAdmin
      .from('users')
      .upsert({
        telegram_id: user.id,
        username: user.username || null,
        first_name: user.first_name,
        last_name: user.last_name || null,
        language_code: user.language_code || 'ru',
        is_premium: user.is_premium || false,
        updated_at: new Date().toISOString()
      }, { onConflict: 'telegram_id' })
      .then(({ error }) => {
        if (error) console.error('User upsert error:', error)
      })
  }
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (text?.startsWith('/')) {
    await handleCommandFast(chatId, text, user, startTime)
  }
}

// –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API
async function handleCommandFast(chatId: number, command: string, user: any, startTime: number) {
  const [cmd] = command.split(' ')
  const botToken = process.env.TELEGRAM_BOT_TOKEN!
  const appUrl = process.env.NEXT_PUBLIC_APP_URL!
  
  let responseText = ''
  let keyboard = null
  
  switch (cmd) {
    case '/start':
      responseText = `üèãÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Pushups Tracker</b>, ${user.first_name}!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–∂–∏–º–∞–Ω–∏–π –∏ –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –Ω–∏—Ö –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è.

<b>–ö–æ–º–∞–Ω–¥—ã:</b> /settings /stats /help

–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:`
      
      keyboard = {
        inline_keyboard: [[
          { text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: appUrl } }
        ]]
      }
      break
      
    case '/help':
      responseText = `‚ùì <b>–ü–æ–º–æ—â—å</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–ø—É—Å–∫
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π  
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ /settings
2. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
3. –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
4. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ /stats

<b>–°–æ–≤–µ—Ç:</b> –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É! üí™`
      break
      
    case '/settings':
      await handleSettingsFast(chatId, user.id, botToken, appUrl)
      return
      
    case '/stats':
      await handleStatsFast(chatId, user.id, botToken, appUrl)
      return
      
    default:
      responseText = '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.'
  }
  
  if (responseText) {
    const payload: any = {
      chat_id: chatId,
      text: responseText,
      parse_mode: 'HTML'
    }
    
    if (keyboard) {
      payload.reply_markup = keyboard
    }
    
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    })
    
    if (!response.ok) {
      console.error('Telegram API error:', await response.text())
    } else {
      console.log(`Command ${cmd} processed in ${Date.now() - startTime}ms`)
    }
  }
}

async function handleSettingsFast(chatId: number, userId: number, botToken: string, appUrl: string) {
  try {
    const { data: settings } = await supabaseAdmin
      .from('reminder_settings')
      .select('*')
      .eq('user_id', userId)
      .single()

    const currentSettings = settings || {
      days_of_week: [1, 3, 5],
      reminder_time: '09:00:00',
      timezone: 'Europe/Moscow',
      enabled: true
    }

    const daysText = (currentSettings.days_of_week || [1, 3, 5])
      .map((day: number) => ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'][day])
      .join(', ')

    const settingsText = `‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>

üóìÔ∏è <b>–î–Ω–∏:</b> ${daysText}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${(currentSettings.reminder_time || '09:00:00').slice(0, 5)}
üåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> ${currentSettings.timezone || 'Europe/Moscow'}
üîî <b>–í–∫–ª—é—á–µ–Ω—ã:</b> ${currentSettings.enabled ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`

    await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: settingsText,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [[
            { text: '‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', web_app: { url: `${appUrl}/settings` } }
          ]]
        }
      })
    })
  } catch (error) {
    console.error('Settings command error:', error)
    await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      })
    })
  }
}

async function handleStatsFast(chatId: number, userId: number, botToken: string, appUrl: string) {
  try {
    const { data: stats } = await supabaseAdmin
      .from('user_stats')
      .select('*')
      .eq('user_id', userId)
      .single()

    if (!stats || (stats.total_workouts || 0) === 0) {
      await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: `üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`,
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [[
              { text: 'üí™ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', web_app: { url: appUrl } }
            ]]
          }
        })
      })
      return
    }

    const statsText = `üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üèãÔ∏è <b>–í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b> ${stats.total_workouts || 0}
üí™ <b>–í—Å–µ–≥–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π:</b> ${stats.total_reps || 0}
üìà <b>–°—Ä–µ–¥–Ω–µ–µ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:</b> ${Math.round(stats.avg_reps_per_workout || 0)}
üèÜ <b>–õ–∏—á–Ω—ã–π —Ä–µ–∫–æ—Ä–¥:</b> ${stats.personal_best_reps || 0} –æ—Ç–∂–∏–º–∞–Ω–∏–π
üî• <b>–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:</b> ${stats.current_streak || 0} ${getDaysWord(stats.current_streak || 0)}
‚ö° <b>–õ—É—á—à–∞—è —Å–µ—Ä–∏—è:</b> ${stats.max_streak || 0} ${getDaysWord(stats.max_streak || 0)}

–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:`

    await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: statsText,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [[
            { text: 'üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', web_app: { url: `${appUrl}/stats` } }
          ]]
        }
      })
    })
  } catch (error) {
    console.error('Stats command error:', error)
    await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      })
    })
  }
}

function getDaysWord(count: number): string {
  const lastDigit = count % 10
  const lastTwoDigits = count % 100

  if (lastTwoDigits >= 11 && lastTwoDigits <= 14) return '–¥–Ω–µ–π'
  if (lastDigit === 1) return '–¥–µ–Ω—å'
  if (lastDigit >= 2 && lastDigit <= 4) return '–¥–Ω—è'
  return '–¥–Ω–µ–π'
}

// GET endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
export async function GET() {
  return NextResponse.json({ 
    status: 'ok',
    webhook: '/api/bot/webhook',
    message: 'Fast Telegram Bot webhook endpoint is ready'
  })
}