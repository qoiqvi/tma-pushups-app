import { telegramBot } from './telegram'
import { supabaseAdmin } from '@/lib/supabase/server'
import { BotUpdate, BotMessage, BotUser, BotInlineKeyboardMarkup } from '@/types/bot'
import { formatDaysOfWeek, formatTime } from './utils'

// –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
export async function handleBotUpdate(update: BotUpdate) {
  try {
    if (update.message) {
      await handleMessage(update.message)
    } else if (update.callback_query) {
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É callback –∫–Ω–æ–ø–æ–∫ –≤ –±—É–¥—É—â–µ–º
      console.log('Callback query:', update.callback_query)
    }
  } catch (error) {
    console.error('Error in handleBotUpdate:', error)
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleMessage(message: BotMessage) {
  const chatId = message.chat.id
  const text = message.text
  const user = message.from

  // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ)
  upsertUser(user)

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
  if (text?.startsWith('/')) {
    await handleCommand(chatId, text, user)
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–µ)
function upsertUser(user: BotUser) {
  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ, –Ω–µ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  supabaseAdmin
    .from('users')
    .upsert({
      telegram_id: user.id,
      username: user.username || null,
      first_name: user.first_name,
      last_name: user.last_name || null,
      language_code: user.language_code || 'ru',
      is_premium: user.is_premium || false,
      updated_at: new Date().toISOString()
    }, {
      onConflict: 'telegram_id'
    })
    .then(({ error }) => {
      if (error) {
        console.error('Error upserting user:', error)
      }
    })
    // .catch((error: any) => {
    //   console.error('Error in upsertUser:', error)
    // })
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
async function handleCommand(chatId: number, command: string, user: BotUser) {
  const [cmd] = command.split(' ')

  switch (cmd) {
    case '/start':
      await handleStartCommand(chatId, user)
      break
    case '/settings':
      await handleSettingsCommand(chatId, user.id)
      break
    case '/stats':
      await handleStatsCommand(chatId, user.id)
      break
    case '/help':
      await handleHelpCommand(chatId)
      break
    default:
      await telegramBot.sendMessage(
        chatId, 
        '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.'
      )
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
async function handleStartCommand(chatId: number, user: BotUser) {
  const welcomeText = `üèãÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Pushups Tracker</b>, ${user.first_name}!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–∂–∏–º–∞–Ω–∏–π –∏ –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –Ω–∏—Ö –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è.

<b>–ö–æ–º–∞–Ω–¥—ã:</b> /settings /stats /help

–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:`

  try {
    await telegramBot.sendMessage(chatId, welcomeText, {
      reply_markup: {
        inline_keyboard: [[
          { 
            text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 
            web_app: { url: process.env.NEXT_PUBLIC_APP_URL! }
          }
        ]]
      },
      parse_mode: 'HTML'
    })
  } catch (error) {
    console.error('Error in handleStartCommand:', error)
    // Fallback - –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try {
      await telegramBot.sendMessage(chatId, `üèãÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.first_name}! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.`)
    } catch (fallbackError) {
      console.error('Fallback message failed:', fallbackError)
    }
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /settings
async function handleSettingsCommand(chatId: number, userId: number) {
  try {
    const { data: settings } = await supabaseAdmin
      .from('reminder_settings')
      .select('*')
      .eq('user_id', userId)
      .single()

    const currentSettings = settings || {
      days_of_week: [1, 3, 5],
      reminder_time: '09:00:00',
      timezone: 'Europe/Moscow',
      enabled: true
    }

    const daysText = formatDaysOfWeek(currentSettings.days_of_week || [1, 3, 5])
    const timeText = formatTime(currentSettings.reminder_time || '09:00:00')

    const settingsText = `
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>

üóìÔ∏è <b>–î–Ω–∏:</b> ${daysText}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${timeText}
üåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> ${currentSettings.timezone}
üîî <b>–í–∫–ª—é—á–µ–Ω—ã:</b> ${currentSettings.enabled ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
`

    const keyboard: BotInlineKeyboardMarkup = {
      inline_keyboard: [[
        { 
          text: '‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 
          web_app: { url: `${process.env.NEXT_PUBLIC_APP_URL}/settings` }
        }
      ]]
    }

    await telegramBot.sendMessage(chatId, settingsText, {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    })
  } catch (error) {
    console.error('Error in handleSettingsCommand:', error)
    await telegramBot.sendMessage(
      chatId,
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    )
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /stats
async function handleStatsCommand(chatId: number, userId: number) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: stats } = await supabaseAdmin
      .from('user_stats')
      .select('*')
      .eq('user_id', userId)
      .single()

    if (!stats || stats.total_workouts === 0) {
      const noStatsText = `
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
`
      const keyboard: BotInlineKeyboardMarkup = {
        inline_keyboard: [[
          { 
            text: 'üí™ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', 
            web_app: { url: process.env.NEXT_PUBLIC_APP_URL! }
          }
        ]]
      }

      await telegramBot.sendMessage(chatId, noStatsText, {
        reply_markup: keyboard,
        parse_mode: 'HTML'
      })
      return
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const statsText = `
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üèãÔ∏è <b>–í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b> ${stats.total_workouts}
üí™ <b>–í—Å–µ–≥–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π:</b> ${stats.total_reps}
üìà <b>–°—Ä–µ–¥–Ω–µ–µ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:</b> ${Math.round(stats.avg_reps_per_workout || 0)}
üèÜ <b>–õ–∏—á–Ω—ã–π —Ä–µ–∫–æ—Ä–¥:</b> ${stats.personal_best_reps || 0} –æ—Ç–∂–∏–º–∞–Ω–∏–π
üî• <b>–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:</b> ${stats.current_streak || 0} ${getDaysWord(stats.current_streak || 0)}
‚ö° <b>–õ—É—á—à–∞—è —Å–µ—Ä–∏—è:</b> ${stats.max_streak || 0} ${getDaysWord(stats.max_streak || 0)}

–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:
`

    const keyboard: BotInlineKeyboardMarkup = {
      inline_keyboard: [[
        { 
          text: 'üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 
          web_app: { url: `${process.env.NEXT_PUBLIC_APP_URL}/stats` }
        }
      ]]
    }

    await telegramBot.sendMessage(chatId, statsText, {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    })
  } catch (error) {
    console.error('Error in handleStatsCommand:', error)
    await telegramBot.sendMessage(
      chatId,
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    )
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /help
async function handleHelpCommand(chatId: number) {
  const helpText = `
‚ùì <b>–ü–æ–º–æ—â—å</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/settings - –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç:</b>
1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ /settings
2. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
3. –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
4. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ /stats

<b>–°–æ–≤–µ—Ç:</b> –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É! üí™
`

  await telegramBot.sendMessage(chatId, helpText, {
    parse_mode: 'HTML'
  })
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–¥–µ–Ω—å"
function getDaysWord(count: number): string {
  const lastDigit = count % 10
  const lastTwoDigits = count % 100

  if (lastTwoDigits >= 11 && lastTwoDigits <= 14) {
    return '–¥–Ω–µ–π'
  }

  if (lastDigit === 1) {
    return '–¥–µ–Ω—å'
  }

  if (lastDigit >= 2 && lastDigit <= 4) {
    return '–¥–Ω—è'
  }

  return '–¥–Ω–µ–π'
}