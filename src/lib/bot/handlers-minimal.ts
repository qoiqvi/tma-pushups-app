import { BotUpdate } from '@/types/bot'

// –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π Edge-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - —Ç–æ–ª—å–∫–æ /start
export async function handleBotUpdateMinimal(update: BotUpdate) {
  const startTime = Date.now()
  
  if (!update.message?.text || update.message.text !== '/start') {
    console.log(`[${Date.now() - startTime}ms] Ignoring non-/start message: ${update.message?.text || 'no text'}`)
    return // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ /start
  }
  
  const chatId = update.message.chat.id
  const firstName = update.message.from.first_name
  
  console.log(`[${Date.now() - startTime}ms] Processing /start for user ${chatId}`)
  
  const welcomeText = `üèãÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Pushups Tracker</b>, ${firstName}!

–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–∂–∏–º–∞–Ω–∏–π –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:`
  
  try {
    console.log(`[${Date.now() - startTime}ms] Sending message to Telegram API`)
    
    // –ü—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å –∫ Telegram API
    const response = await fetch(
      `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: welcomeText,
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [[
              { 
                text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 
                web_app: { url: process.env.NEXT_PUBLIC_APP_URL! }
              }
            ]]
          }
        })
      }
    )
    
    const result = await response.json()
    console.log(`[${Date.now() - startTime}ms] Telegram API response:`, result.ok ? 'Success' : 'Failed', result.error_code || '')
    
    if (!result.ok) {
      console.error(`[${Date.now() - startTime}ms] Telegram API error:`, result)
    }
    
    console.log(`[${Date.now() - startTime}ms] /start processing completed`)
  } catch (error) {
    console.error(`[${Date.now() - startTime}ms] Error sending message:`, error)
    throw error // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è webhook
  }
}