import { BotUpdate, BotUser } from '@/types/bot'

// Edge-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç Node.js –±–∏–±–ª–∏–æ—Ç–µ–∫
export async function handleBotUpdateEdge(update: BotUpdate) {
  const startTime = Date.now()
  
  try {
    if (!update.message) {
      console.log(`[${Date.now() - startTime}ms] No message in update`)
      return
    }
    
    const message = update.message
    const chatId = message.chat.id
    const text = message.text
    const user = message.from
    
    console.log(`[${Date.now() - startTime}ms] Processing message from ${user.id}: ${text}`)
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    if (text === '/start') {
      const welcomeText = `üèãÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Pushups Tracker</b>, ${user.first_name}!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–∂–∏–º–∞–Ω–∏–π –∏ –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –Ω–∏—Ö –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è.

<b>–ö–æ–º–∞–Ω–¥—ã:</b> /settings /stats /help

–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:`
      
      await sendTelegramMessage(chatId, welcomeText, {
        reply_markup: {
          inline_keyboard: [[
            { 
              text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 
              web_app: { url: process.env.NEXT_PUBLIC_APP_URL! }
            }
          ]]
        }
      })
      
      console.log(`[${Date.now() - startTime}ms] Start command processed`)
      
      // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      updateUserAsync(user)
    } 
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats
    else if (text === '/stats') {
      await handleStatsCommand(chatId, user.id)
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /settings  
    else if (text === '/settings') {
      await handleSettingsCommand(chatId, user.id)
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
    else if (text === '/help') {
      const helpText = `‚ùì <b>–ü–æ–º–æ—â—å</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/settings - –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–°–æ–≤–µ—Ç:</b> –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É! üí™`
      
      await sendTelegramMessage(chatId, helpText)
    }
    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    else if (text?.startsWith('/')) {
      await sendTelegramMessage(
        chatId,
        '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.'
      )
    }
    
    console.log(`[${Date.now() - startTime}ms] Update handling completed`)
  } catch (error) {
    console.error(`[${Date.now() - startTime}ms] Error in handleBotUpdateEdge:`, error)
  }
}

// –ü—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ Telegram API (Edge-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ)
async function sendTelegramMessage(chatId: number, text: string, options?: any) {
  const startTime = Date.now()
  
  try {
    const response = await fetch(
      `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text,
          parse_mode: options?.parse_mode || 'HTML',
          reply_markup: options?.reply_markup
        })
      }
    )
    
    const result = await response.json()
    console.log(`[${Date.now() - startTime}ms] Message sent to ${chatId}`)
    
    if (!result.ok) {
      console.error('Telegram API error:', result)
    }
    
    return result
  } catch (error) {
    console.error(`[${Date.now() - startTime}ms] Failed to send message:`, error)
    throw error
  }
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Edge-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ)
function updateUserAsync(user: BotUser) {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
  const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!
  
  fetch(`${supabaseUrl}/rest/v1/users`, {
    method: 'POST',
    headers: {
      'apikey': supabaseKey,
      'Authorization': `Bearer ${supabaseKey}`,
      'Content-Type': 'application/json',
      'Prefer': 'resolution=merge-duplicates'
    },
    body: JSON.stringify({
      telegram_id: user.id,
      username: user.username || null,
      first_name: user.first_name,
      last_name: user.last_name || null,
      language_code: user.language_code || 'ru',
      is_premium: user.is_premium || false,
      updated_at: new Date().toISOString()
    })
  }).catch(error => {
    console.error('Failed to update user:', error)
  })
}

// Edge-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
async function handleStatsCommand(chatId: number, userId: number) {
  const startTime = Date.now()
  console.log(`[handleStatsCommand] Starting for user ${userId}`)
  
  try {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
    const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!
    
    const response = await fetch(`${supabaseUrl}/rest/v1/user_stats?user_id=eq.${userId}&select=*`, {
      headers: {
        'apikey': supabaseKey,
        'Authorization': `Bearer ${supabaseKey}`,
        'Content-Type': 'application/json'
      }
    })
    
    console.log(`[handleStatsCommand] Supabase responded in ${Date.now() - startTime}ms`)
    
    const data = await response.json()
    const stats = data?.[0]
    
    let messageText: string
    let replyMarkup: any
    
    if (!stats || stats.total_workouts === 0) {
      messageText = `üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`
      replyMarkup = {
        inline_keyboard: [[
          { 
            text: 'üí™ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', 
            web_app: { url: process.env.NEXT_PUBLIC_APP_URL! }
          }
        ]]
      }
    } else {
      messageText = `üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üèãÔ∏è <b>–í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b> ${stats.total_workouts}
üí™ <b>–í—Å–µ–≥–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π:</b> ${stats.total_reps}
üìà <b>–°—Ä–µ–¥–Ω–µ–µ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:</b> ${Math.round(stats.avg_reps_per_workout || 0)}
üèÜ <b>–õ–∏—á–Ω—ã–π —Ä–µ–∫–æ—Ä–¥:</b> ${stats.personal_best_reps || 0} –æ—Ç–∂–∏–º–∞–Ω–∏–π
üî• <b>–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:</b> ${stats.current_streak || 0} ${getDaysWord(stats.current_streak || 0)}
‚ö° <b>–õ—É—á—à–∞—è —Å–µ—Ä–∏—è:</b> ${stats.max_streak || 0} ${getDaysWord(stats.max_streak || 0)}

–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:`
      
      replyMarkup = {
        inline_keyboard: [[
          { 
            text: 'üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 
            web_app: { url: `${process.env.NEXT_PUBLIC_APP_URL}/stats` }
          }
        ]]
      }
    }
    
    console.log(`[handleStatsCommand] Sending message after ${Date.now() - startTime}ms`)
    
    await sendTelegramMessage(chatId, messageText, {
      reply_markup: replyMarkup,
      parse_mode: 'HTML'
    })
    
    console.log(`[handleStatsCommand] Completed in ${Date.now() - startTime}ms`)
  } catch (error) {
    console.error(`[handleStatsCommand] Error after ${Date.now() - startTime}ms:`, error)
    await sendTelegramMessage(
      chatId,
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    )
  }
}

// Edge-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings
async function handleSettingsCommand(chatId: number, userId: number) {
  const startTime = Date.now()
  console.log(`[handleSettingsCommand] Starting for user ${userId}`)
  
  try {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
    const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!
    
    const response = await fetch(`${supabaseUrl}/rest/v1/reminder_settings?user_id=eq.${userId}&select=*`, {
      headers: {
        'apikey': supabaseKey,
        'Authorization': `Bearer ${supabaseKey}`,
        'Content-Type': 'application/json'
      }
    })
    
    console.log(`[handleSettingsCommand] Supabase responded in ${Date.now() - startTime}ms`)
    
    const data = await response.json()
    const settings = data?.[0] || {
      days_of_week: [1, 3, 5],
      reminder_time: '09:00:00',
      timezone: 'Europe/Moscow',
      enabled: true
    }
    
    const daysText = formatDaysOfWeek(settings.days_of_week || [1, 3, 5])
    const timeText = formatTime(settings.reminder_time || '09:00:00')
    
    const settingsText = `‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>

üóìÔ∏è <b>–î–Ω–∏:</b> ${daysText}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${timeText}
üåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> ${settings.timezone}
üîî <b>–í–∫–ª—é—á–µ–Ω—ã:</b> ${settings.enabled ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`
    
    const replyMarkup = {
      inline_keyboard: [[
        { 
          text: '‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 
          web_app: { url: `${process.env.NEXT_PUBLIC_APP_URL}/settings` }
        }
      ]]
    }
    
    console.log(`[handleSettingsCommand] Sending message after ${Date.now() - startTime}ms`)
    
    await sendTelegramMessage(chatId, settingsText, {
      reply_markup: replyMarkup,
      parse_mode: 'HTML'
    })
    
    console.log(`[handleSettingsCommand] Completed in ${Date.now() - startTime}ms`)
  } catch (error) {
    console.error(`[handleSettingsCommand] Error after ${Date.now() - startTime}ms:`, error)
    await sendTelegramMessage(
      chatId,
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    )
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getDaysWord(count: number): string {
  const lastDigit = count % 10
  const lastTwoDigits = count % 100

  if (lastTwoDigits >= 11 && lastTwoDigits <= 14) {
    return '–¥–Ω–µ–π'
  }

  if (lastDigit === 1) {
    return '–¥–µ–Ω—å'
  }

  if (lastDigit >= 2 && lastDigit <= 4) {
    return '–¥–Ω—è'
  }

  return '–¥–Ω–µ–π'
}

function formatDaysOfWeek(days: number[]): string {
  const dayNames = {
    1: '–ü–Ω',
    2: '–í—Ç', 
    3: '–°—Ä',
    4: '–ß—Ç',
    5: '–ü—Ç',
    6: '–°–±',
    0: '–í—Å'
  }
  
  return days.map(d => dayNames[d as keyof typeof dayNames] || d).join(', ')
}

function formatTime(time: string): string {
  return time.slice(0, 5) // –û—Ç—Å–µ–∫–∞–µ–º —Å–µ–∫—É–Ω–¥—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º HH:MM
}