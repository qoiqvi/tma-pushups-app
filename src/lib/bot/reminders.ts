import { format, utcToZonedTime } from 'date-fns-tz'
import { telegramBot } from './telegram'
import { supabaseAdmin } from '@/lib/supabase/server'
import { BotInlineKeyboardMarkup } from '@/types/bot'

export async function sendReminders() {
  const now = new Date()
  const currentDay = now.getDay() // 0 = Sunday, 1 = Monday, etc.
  
  console.log(`Checking reminders for day ${currentDay} at ${now.toISOString()}`)
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
  const { data: settings, error } = await supabaseAdmin
    .from('reminder_settings')
    .select(`
      *,
      users (
        telegram_id,
        first_name,
        username
      )
    `)
    .eq('enabled', true)
    .contains('days_of_week', [currentDay])

  if (error) {
    console.error('Error fetching reminder settings:', error)
    return { sent: 0, errors: 1, error: error.message }
  }

  if (!settings || settings.length === 0) {
    console.log('No reminders to send for today')
    return { sent: 0, errors: 0, total: 0 }
  }

  console.log(`Found ${settings.length} potential reminders`)

  let sent = 0
  let errors = 0
  const sendResults: Array<{ userId: number; status: string; time?: string }> = []

  for (const setting of settings) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userTime = utcToZonedTime(now, setting.timezone || 'Europe/Moscow')
      const userTimeString = format(userTime, 'HH:mm')
      const reminderTime = setting.reminder_time.slice(0, 5)

      console.log(`User ${setting.user_id}: ${userTimeString} vs ${reminderTime} (${setting.timezone})`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å –¥–æ–ø—É—Å–∫–æ–º ¬±5 –º–∏–Ω—É—Ç
      if (isTimeMatch(userTimeString, reminderTime)) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
        const today = format(now, 'yyyy-MM-dd')
        
        if (setting.last_sent_at === today) {
          console.log(`Already sent today to user ${setting.user_id}`)
          continue
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        const success = await sendReminderMessage(
          setting.user_id,
          setting.users?.first_name || null
        )
        
        if (success) {
          // –û–±–Ω–æ–≤–ª—è–µ–º last_sent_at
          const { error: updateError } = await supabaseAdmin
            .from('reminder_settings')
            .update({ last_sent_at: today })
            .eq('user_id', setting.user_id)

          if (updateError) {
            console.error(`Failed to update last_sent_at for user ${setting.user_id}:`, updateError)
          }

          sent++
          sendResults.push({ 
            userId: setting.user_id, 
            status: 'sent',
            time: userTimeString
          })
        } else {
          errors++
          sendResults.push({ 
            userId: setting.user_id, 
            status: 'failed'
          })
        }
      }
    } catch (err) {
      console.error(`Failed to process reminder for user ${setting.user_id}:`, err)
      errors++
      sendResults.push({ 
        userId: setting.user_id, 
        status: 'error'
      })
    }
  }

  return { 
    sent, 
    errors, 
    total: settings.length,
    results: sendResults
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å –¥–æ–ø—É—Å–∫–æ–º ¬±5 –º–∏–Ω—É—Ç
function isTimeMatch(currentTime: string, targetTime: string): boolean {
  const [currentHour, currentMin] = currentTime.split(':').map(Number)
  const [targetHour, targetMin] = targetTime.split(':').map(Number)
  
  const currentMinutes = currentHour * 60 + currentMin
  const targetMinutes = targetHour * 60 + targetMin
  
  // –î–æ–ø—É—Å–∫ ¬±5 –º–∏–Ω—É—Ç
  const difference = Math.abs(currentMinutes - targetMinutes)
  return difference <= 5
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendReminderMessage(
  userId: number, 
  firstName: string | null
): Promise<boolean> {
  const name = firstName ? `, ${firstName}` : ''
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
  const { data: stats } = await supabaseAdmin
    .from('user_stats')
    .select('current_streak, total_workouts')
    .eq('user_id', userId)
    .single()

  let motivationText = ''
  if (stats) {
    if (stats.current_streak > 0) {
      motivationText = `\n\nüî• –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: ${stats.current_streak} ${getDaysWord(stats.current_streak)}. –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–π—Ç–µ –µ—ë!`
    } else if (stats.total_workouts > 0) {
      motivationText = '\n\nüí´ –í—Ä–µ–º—è –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!'
    }
  }

  const message = `üí™ –í—Ä–µ–º—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏${name}!

–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–∂–∏–º–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è. –î–∞–∂–µ –Ω–µ–±–æ–ª—å—à–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ª—É—á—à–µ, —á–µ–º –Ω–∏–∫–∞–∫–æ–π!${motivationText}

–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:`

  const keyboard: BotInlineKeyboardMarkup = {
    inline_keyboard: [[
      { 
        text: 'üèãÔ∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', 
        web_app: { url: process.env.NEXT_PUBLIC_APP_URL! }
      }
    ]]
  }

  try {
    await telegramBot.sendMessage(userId, message, {
      reply_markup: keyboard
    })
    console.log(`Reminder sent to user ${userId}`)
    return true
  } catch (error) {
    console.error(`Failed to send reminder to user ${userId}:`, error)
    return false
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–¥–µ–Ω—å"
function getDaysWord(count: number): string {
  const lastDigit = count % 10
  const lastTwoDigits = count % 100

  if (lastTwoDigits >= 11 && lastTwoDigits <= 14) {
    return '–¥–Ω–µ–π'
  }

  if (lastDigit === 1) {
    return '–¥–µ–Ω—å'
  }

  if (lastDigit >= 2 && lastDigit <= 4) {
    return '–¥–Ω—è'
  }

  return '–¥–Ω–µ–π'
}