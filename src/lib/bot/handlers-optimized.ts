import { BotUpdate, BotMessage, BotUser } from '@/types/bot'

// –ü—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ Telegram API –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è overhead –æ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
async function sendTelegramMessage(chatId: number, text: string, options?: any) {
  const startTime = Date.now()
  
  try {
    const response = await fetch(
      `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text,
          parse_mode: options?.parse_mode || 'HTML',
          reply_markup: options?.reply_markup
        })
      }
    )
    
    const result = await response.json()
    console.log(`[${Date.now() - startTime}ms] Message sent to ${chatId}`)
    
    if (!result.ok) {
      console.error('Telegram API error:', result)
    }
    
    return result
  } catch (error) {
    console.error(`[${Date.now() - startTime}ms] Failed to send message:`, error)
    throw error
  }
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
export async function handleBotUpdateOptimized(update: BotUpdate) {
  const startTime = Date.now()
  
  try {
    if (!update.message) {
      console.log(`[${Date.now() - startTime}ms] No message in update`)
      return
    }
    
    const message = update.message
    const chatId = message.chat.id
    const text = message.text
    const user = message.from
    
    console.log(`[${Date.now() - startTime}ms] Processing message from ${user.id}: ${text}`)
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if (text === '/start') {
      const welcomeText = `üèãÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Pushups Tracker</b>, ${user.first_name}!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–∂–∏–º–∞–Ω–∏–π –∏ –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –Ω–∏—Ö –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è.

<b>–ö–æ–º–∞–Ω–¥—ã:</b> /settings /stats /help

–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:`
      
      await sendTelegramMessage(chatId, welcomeText, {
        reply_markup: {
          inline_keyboard: [[
            { 
              text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 
              web_app: { url: process.env.NEXT_PUBLIC_APP_URL! }
            }
          ]]
        }
      })
      
      console.log(`[${Date.now() - startTime}ms] Start command processed`)
      
      // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      updateUserAsync(user)
    } else if (text?.startsWith('/')) {
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ - –ø—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã
      await sendTelegramMessage(
        chatId,
        '‚è≥ –ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...'
      )
      
      // –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ —Ñ–æ–Ω–µ
      processCommandAsync(chatId, text, user)
    }
    
    console.log(`[${Date.now() - startTime}ms] Update handling completed`)
  } catch (error) {
    console.error(`[${Date.now() - startTime}ms] Error in handleBotUpdateOptimized:`, error)
  }
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUserAsync(user: BotUser) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º fetch –¥–ª—è Supabase API –Ω–∞–ø—Ä—è–º—É—é
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
  const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!
  
  fetch(`${supabaseUrl}/rest/v1/users`, {
    method: 'POST',
    headers: {
      'apikey': supabaseKey,
      'Authorization': `Bearer ${supabaseKey}`,
      'Content-Type': 'application/json',
      'Prefer': 'resolution=merge-duplicates'
    },
    body: JSON.stringify({
      telegram_id: user.id,
      username: user.username || null,
      first_name: user.first_name,
      last_name: user.last_name || null,
      language_code: user.language_code || 'ru',
      is_premium: user.is_premium || false,
      updated_at: new Date().toISOString()
    })
  }).catch(error => {
    console.error('Failed to update user:', error)
  })
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
async function processCommandAsync(chatId: number, command: string, user: BotUser) {
  const [cmd] = command.split(' ')
  
  try {
    switch (cmd) {
      case '/settings':
      case '/stats':
        // –≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π handler
        const { handleBotUpdate } = await import('./handlers')
        await handleBotUpdate({
          message: {
            chat: { id: chatId, type: 'private' },
            from: user,
            text: command,
            message_id: 0,
            date: Math.floor(Date.now() / 1000)
          }
        })
        break
        
      case '/help':
        const helpText = `‚ùì <b>–ü–æ–º–æ—â—å</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/settings - –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–°–æ–≤–µ—Ç:</b> –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É! üí™`
        
        await sendTelegramMessage(chatId, helpText)
        break
        
      default:
        await sendTelegramMessage(
          chatId,
          '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.'
        )
    }
  } catch (error) {
    console.error('Error processing command:', error)
    await sendTelegramMessage(
      chatId,
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    )
  }
}